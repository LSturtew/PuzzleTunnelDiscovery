#!/usr/bin/env python2

import os
import sys
sys.path.append(os.getcwd())

import pyosr
import numpy as np
import aniconf12 as aniconf
import json

def usage():
    print('''
Usage: condor_visibility_mc.py <PRM file> <Task file> <Task ID> <Output Dir>
    Task file is generated by `condor_saforce.py part`
    Task ID is an integer to specifiy which task in Task file to run''')

def main():
    if sys.argv[1] == '-h':
        usage()
        return
    r = pyosr.UnitWorld() # pyosr.Renderer is not avaliable in HTCondor
    r.loadModelFromFile(aniconf.env_wt_fn)
    r.loadRobotFromFile(aniconf.rob_wt_fn)
    r.enforceRobotCenter(aniconf.rob_ompl_center)
    r.scaleToUnit()
    r.angleModel(0.0, 0.0)

    mc_reference = np.load(sys.argv[1])['V']
    taskfile = sys.argv[2]
    with open(taskfile) as f:
        tasks = json.load(f)
    task = tasks[int(sys.argv[3])]
    fn = task[3]
    fn_base = os.path.basename(fn)

    vboutdir = sys.argv[4] # VisiBility OUTput DIRectory
    ofn = '{}/{}'.format(vboutdir, fn_base)
    V0 = []
    for traj in np.load(fn)['ALL_RQS']:
        V0.append(traj[-1])
    V0 = np.array(V0, dtype=float)
    # print(V0)
    # V0 = np.load(task[0])['TOCRQS'][q0start:q0end]
    os.environ['OMP_NUM_THREADS'] = '1'
    VM = r.calculate_visibility_matrix2(V0, True,
                                        mc_reference[0:-1], False,
                                        # mc_reference[0:4], False,
                                        0.0125 * 4 / 8)
    q0start,q0end = task[1],task[2] # Not used, we use the output of condor_saforce
    q1start,q1end = 0,-1            # Sameve as above
    np.savez(ofn, VMFrag=VM, Locator=[q0start, q0end, q1start, q1end])

if __name__ == '__main__':
    main()
