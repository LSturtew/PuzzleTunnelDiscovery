#!/usr/bin/env python2

import os
import sys
sys.path.append(os.getcwd())

import pyosr
import numpy as np
import aniconf12 as aniconf
import json

def usage():
    print('''
Usage: condor_visibility_mc.py <command> <PRM file> <task partition file> <task ID> <output dir>
    command may be 'saforce' or 'numeric' to specify the input type, or 'help'
    Task partition file is generated by `condor_saforce.py part`
    Task ID is an integer to specifiy which task in Task file to run''')

def main():
    if sys.argv[1] in ['-h', 'help']:
        usage()
        return
    cmd = sys.argv[1]
    input_file_position = None
    if cmd == 'saforce':
        input_file_position = 3
    elif cmd == 'numeric':
        input_file_position = 0
    else:
        assert False, "unsupported command {}".format(cmd)
    r = pyosr.UnitWorld() # pyosr.Renderer is not avaliable in HTCondor
    r.loadModelFromFile(aniconf.env_wt_fn)
    r.loadRobotFromFile(aniconf.rob_wt_fn)
    r.enforceRobotCenter(aniconf.rob_ompl_center)
    r.scaleToUnit()
    r.angleModel(0.0, 0.0)

    mc_reference,taskfile,task,vmoutdir = sys.argv[2:]
    assert os.path.isfile(mc_reference)
    assert os.path.isfile(taskfile)
    assert os.path.isdir(vmoutdir), "{} is not a directory".format(vmoutdir)

    mc_reference = np.load(mc_reference)['V']
    with open(taskfile) as f:
        tasks = json.load(f)
    task = tasks[int(task)]
    fn = task[input_file_position]
    fn_base = os.path.basename(fn)

    ofn = '{}/{}'.format(vmoutdir, fn_base)
    V0 = []
    dic = np.load(fn)
    q0start,q0end = task[1],task[2]
    if 'ALL_RQS' in dic:
        assert cmd == 'saforce'
        for traj in dic['ALL_RQS']:
            V0.append(traj[-1])
        # Note: q0start and q0start are not used, because ALL_RQS are already
        #       tailored by condor_saforce.py
    elif 'CRQS' in dic:
        assert cmd == 'numeric'
        V0 = dic['CRQS']
        start = q0start
        end = min(len(V0), q0end) # Bound to the size limit
        V0 = V0[start:end]
    else:
        assert False, "Unsupported input, neither 'ALL_RQS' nor 'CRQS' existed"
    V0 = np.array(V0, dtype=float)
    # print(V0)
    # V0 = np.load(task[0])['TOCRQS'][q0start:q0end]
    os.environ['OMP_NUM_THREADS'] = '1'
    VM = r.calculate_visibility_matrix2(V0, True,
                                        mc_reference[0:-1], False,
                                        # mc_reference[0:4], False,
                                        0.0125 * 4 / 8)
    q1start,q1end = 0,-1            # Sameve as above
    np.savez(ofn, VMFrag=VM, Locator=[q0start, q0end, q1start, q1end])

if __name__ == '__main__':
    main()
